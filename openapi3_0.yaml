openapi: 3.0.3
info:
  title: Inventorus 3.0
  description: |-
    This is a simple inventory management project for electronics in its core. It should still be relatively uninversal.
  termsOfService: N/A
#  contact:
#    email: apiteam@swagger.io
  license:
    name: Mit License
    url: https://opensource.org/license/mit
  version: 1.0.11
externalDocs:
  description: Repo
  url: https://github.com/P-B3117/Inventorus
tags:
  - name: user
    description: Operations about user
  - name: components
    description: Components that make up the inventory
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found

  /components:
    post:
      tags:
        - components
      summary: add component
      description: Add the component precised in the body of the request 
      operationId: createComponent
      requestBody:
        description: created component
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Component'

  /components/vendor/{vendor}:
    get:
      tags:
        - components
      summary: "fetch components from vendor"
      description: "Fetch all components from the vendor specified in the url"
      operationId: getComponentsByVendor
      parameters:
        - name: vendor
          in: path
          description: 'The vendor name that all the components fetched must have in common'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentArray' 
        '400':
          description: Invalid vendor name supplied
        '404':
          description: Vendor not found

  /components/type/{type}:
    get:
      tags:
        - components
      summary: "fetch components from vendor"
      description: "Fetch all components from the vendor specified in the url"
      operationId: getComponentsByType
      parameters:
        - name: type
          in: path
          description: 'The type that all the components fetched must have in common'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentArray' 
        '400':
          description: Invalid type name supplied
        '404':
          description: Type not found

  /components/all:
    get:
      tags:
        - components
      summary: "fetch components from vendor"
      description: "Fetch all components from the vendor specified in the url"
      operationId: getAllComponents
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentArray' 
        '404':
          description: Components not found

  /vendor:
    get:
      tags:
        - components
      summary: "fetch components from vendor"
      description: "Fetch all components from the vendor specified in the url"
      operationId: getAllComponents
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentArray' 
        '404':
          description: Components not found


components:
  schemas:

    Component:
      type: object
      properties:
        type:
          type: string
          example: "Capacitor"
        value:
          type: string
          example: "110nf"
        quantity:
          type: integer
          format: uint64
          example: "10"
        footprint:
          description: the footprint given by the vendor
          type: string
          example: Resistor_SMD:R_0805_2012Metric
        vendor:
          type: string
          example: "Digikey"
        description:
          type: string
          example: "A shiny capacitor"
        vendor_part_number:
          type: string
          example: "490-6473-1-ND"
        price:
          type: integer
          example: "23"
          description: The price in cents


    ComponentArray:
      type: array
      description: A list of components objects
      items:
        $ref: '#/components/schemas/Component'
      
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        password:
          type: string
          example: '12345'
        status:
          type: integer
          description: User Permissions
          format: int32
          example: 1
      xml:
        name: user

    UserArray:
      type: array
      description: A list of user objects
      items:
        $ref: '#/components/schemas/User'

  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header